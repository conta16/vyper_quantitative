{}
{}
[{'pos': None, 'col_offset': 0, 'end_lineno': 23, 'lineno': 5, 'body': [{'col_offset': 1, 'end_lineno': 7, 'target': {'id': 'x', 'col_offset': 1, 'end_lineno': 7, 'lineno': 7, 'node_id': 18, 'src': '92:1:0', 'end_col_offset': 2, 'ast_type': 'Name'}, 'lineno': 7, 'node_id': 17, 'value': {'col_offset': 12, 'end_lineno': 7, 'lineno': 7, 'node_id': 22, 'elements': [{'col_offset': 13, 'end_lineno': 7, 'lineno': 7, 'node_id': 23, 'elements': [{'col_offset': 14, 'end_lineno': 7, 'lineno': 7, 'node_id': 24, 'value': 2, 'src': '105:1:0', 'end_col_offset': 15, 'ast_type': 'Int'}, {'col_offset': 16, 'end_lineno': 7, 'lineno': 7, 'node_id': 25, 'value': 4, 'src': '107:1:0', 'end_col_offset': 17, 'ast_type': 'Int'}], 'src': '104:5:0', 'end_col_offset': 18, 'ast_type': 'List'}, {'col_offset': 19, 'end_lineno': 7, 'lineno': 7, 'node_id': 27, 'elements': [{'col_offset': 20, 'end_lineno': 7, 'lineno': 7, 'node_id': 28, 'value': 3, 'src': '111:1:0', 'end_col_offset': 21, 'ast_type': 'Int'}, {'col_offset': 22, 'end_lineno': 7, 'lineno': 7, 'node_id': 29, 'value': 5, 'src': '113:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}], 'src': '110:5:0', 'end_col_offset': 24, 'ast_type': 'List'}, {'col_offset': 25, 'end_lineno': 7, 'lineno': 7, 'node_id': 31, 'elements': [{'col_offset': 26, 'end_lineno': 7, 'lineno': 7, 'node_id': 32, 'value': 8, 'src': '117:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, {'col_offset': 28, 'end_lineno': 7, 'lineno': 7, 'node_id': 33, 'value': 90, 'src': '119:2:0', 'end_col_offset': 30, 'ast_type': 'Int'}], 'src': '116:6:0', 'end_col_offset': 31, 'ast_type': 'List'}], 'src': '103:20:0', 'end_col_offset': 32, 'ast_type': 'List'}, 'src': '92:31:0', 'end_col_offset': 32, 'annotation': {'id': 'int128', 'col_offset': 3, 'end_lineno': 7, 'lineno': 7, 'node_id': 20, 'src': '94:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 1, 'end_lineno': 8, 'target': {'id': 'p', 'col_offset': 1, 'end_lineno': 8, 'lineno': 8, 'node_id': 37, 'src': '158:1:0', 'end_col_offset': 2, 'ast_type': 'Name'}, 'lineno': 8, 'node_id': 36, 'value': {'col_offset': 13, 'end_lineno': 8, 'lineno': 8, 'node_id': 41, 'value': 0, 'src': '170:1:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '158:13:0', 'end_col_offset': 14, 'annotation': {'id': 'int128', 'col_offset': 4, 'end_lineno': 8, 'lineno': 8, 'node_id': 39, 'src': '161:6:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 1, 'end_lineno': 23, 'test': {'values': [{'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 60, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'Not'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'operand': {'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}, 'node_id': 45, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'UnaryOp'}, {'op': {'end_lineno': 9, 'col_offset': 28, 'lineno': 9, 'node_id': 60, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'Not'}, 'col_offset': 28, 'end_lineno': 9, 'lineno': 9, 'operand': {'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}, 'node_id': 59, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'UnaryOp'}], 'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 48, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'Or'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'node_id': 43, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'BoolOp'}, 'lineno': 9, 'body': [{'col_offset': 2, 'end_lineno': 13, 'target': {'id': 'y', 'col_offset': 2, 'end_lineno': 10, 'lineno': 10, 'node_id': 75, 'src': '221:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 10, 'node_id': 74, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '221:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 10, 'lineno': 10, 'node_id': 77, 'src': '224:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 17, 'target': {'id': 'z', 'col_offset': 2, 'end_lineno': 14, 'lineno': 14, 'node_id': 90, 'src': '277:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 14, 'node_id': 89, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '277:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 14, 'lineno': 14, 'node_id': 92, 'src': '280:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 18, 'target': {'id': 'h', 'col_offset': 2, 'end_lineno': 18, 'lineno': 18, 'node_id': 105, 'src': '333:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 18, 'node_id': 104, 'value': {'col_offset': 14, 'end_lineno': 18, 'lineno': 18, 'node_id': 109, 'elements': [{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}, {'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}], 'src': '345:5:0', 'end_col_offset': 19, 'ast_type': 'List'}, 'src': '333:17:0', 'end_col_offset': 19, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 18, 'lineno': 18, 'node_id': 107, 'src': '336:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 20, 'target': {'id': 'p', 'col_offset': 2, 'end_lineno': 20, 'lineno': 20, 'node_id': 116, 'src': '404:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 20, 'node_id': 115, 'value': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}, 'src': '404:26:0', 'end_col_offset': 28, 'ast_type': 'Assign'}, {'col_offset': 2, 'end_lineno': 23, 'test': {'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}, 'orelse': [], 'lineno': 21, 'body': [{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}, {'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}], 'node_id': 138, 'src': '433:33:0', 'end_col_offset': 14, 'ast_type': 'If'}], 'node_id': 42, 'src': '173:293:0', 'end_col_offset': 14, 'ast_type': 'While'}], 'node_id': 12, 'decorator_list': [{'id': 'private', 'col_offset': 1, 'end_lineno': 5, 'lineno': 5, 'node_id': 159, 'src': '52:7:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'end_col_offset': 14, 'src': '51:415:0', 'args': {'col_offset': 9, 'end_lineno': 6, 'defaults': [], 'lineno': 6, 'node_id': 13, 'src': '69:19:0', 'end_col_offset': 28, 'args': [{'col_offset': 9, 'end_lineno': 6, 'lineno': 6, 'arg': 'beneficiary', 'node_id': 14, 'src': '69:19:0', 'end_col_offset': 28, 'annotation': {'id': 'int128', 'col_offset': 22, 'end_lineno': 6, 'lineno': 6, 'node_id': 15, 'src': '82:6:0', 'end_col_offset': 28, 'ast_type': 'Name'}, 'ast_type': 'arg'}], 'default': None, 'ast_type': 'arguments'}, 'name': 'test', 'doc_string': None, 'ast_type': 'FunctionDef', 'returns': None}]
{'Funder': [['sender', 'int128'], ['value', 'uint256']]}
{}
{}
hey
[{'col_offset': 1, 'end_lineno': 7, 'target': {'id': 'x', 'col_offset': 1, 'end_lineno': 7, 'lineno': 7, 'node_id': 18, 'src': '92:1:0', 'end_col_offset': 2, 'ast_type': 'Name'}, 'lineno': 7, 'node_id': 17, 'value': {'col_offset': 12, 'end_lineno': 7, 'lineno': 7, 'node_id': 22, 'elements': [{'col_offset': 13, 'end_lineno': 7, 'lineno': 7, 'node_id': 23, 'elements': [{'col_offset': 14, 'end_lineno': 7, 'lineno': 7, 'node_id': 24, 'value': 2, 'src': '105:1:0', 'end_col_offset': 15, 'ast_type': 'Int'}, {'col_offset': 16, 'end_lineno': 7, 'lineno': 7, 'node_id': 25, 'value': 4, 'src': '107:1:0', 'end_col_offset': 17, 'ast_type': 'Int'}], 'src': '104:5:0', 'end_col_offset': 18, 'ast_type': 'List'}, {'col_offset': 19, 'end_lineno': 7, 'lineno': 7, 'node_id': 27, 'elements': [{'col_offset': 20, 'end_lineno': 7, 'lineno': 7, 'node_id': 28, 'value': 3, 'src': '111:1:0', 'end_col_offset': 21, 'ast_type': 'Int'}, {'col_offset': 22, 'end_lineno': 7, 'lineno': 7, 'node_id': 29, 'value': 5, 'src': '113:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}], 'src': '110:5:0', 'end_col_offset': 24, 'ast_type': 'List'}, {'col_offset': 25, 'end_lineno': 7, 'lineno': 7, 'node_id': 31, 'elements': [{'col_offset': 26, 'end_lineno': 7, 'lineno': 7, 'node_id': 32, 'value': 8, 'src': '117:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, {'col_offset': 28, 'end_lineno': 7, 'lineno': 7, 'node_id': 33, 'value': 90, 'src': '119:2:0', 'end_col_offset': 30, 'ast_type': 'Int'}], 'src': '116:6:0', 'end_col_offset': 31, 'ast_type': 'List'}], 'src': '103:20:0', 'end_col_offset': 32, 'ast_type': 'List'}, 'src': '92:31:0', 'end_col_offset': 32, 'annotation': {'id': 'int128', 'col_offset': 3, 'end_lineno': 7, 'lineno': 7, 'node_id': 20, 'src': '94:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 1, 'end_lineno': 8, 'target': {'id': 'p', 'col_offset': 1, 'end_lineno': 8, 'lineno': 8, 'node_id': 37, 'src': '158:1:0', 'end_col_offset': 2, 'ast_type': 'Name'}, 'lineno': 8, 'node_id': 36, 'value': {'col_offset': 13, 'end_lineno': 8, 'lineno': 8, 'node_id': 41, 'value': 0, 'src': '170:1:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '158:13:0', 'end_col_offset': 14, 'annotation': {'id': 'int128', 'col_offset': 4, 'end_lineno': 8, 'lineno': 8, 'node_id': 39, 'src': '161:6:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 1, 'end_lineno': 23, 'test': {'values': [{'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 60, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'Not'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'operand': {'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}, 'node_id': 45, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'UnaryOp'}, {'op': {'end_lineno': 9, 'col_offset': 28, 'lineno': 9, 'node_id': 60, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'Not'}, 'col_offset': 28, 'end_lineno': 9, 'lineno': 9, 'operand': {'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}, 'node_id': 59, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'UnaryOp'}], 'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 48, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'Or'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'node_id': 43, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'BoolOp'}, 'lineno': 9, 'body': [{'col_offset': 2, 'end_lineno': 13, 'target': {'id': 'y', 'col_offset': 2, 'end_lineno': 10, 'lineno': 10, 'node_id': 75, 'src': '221:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 10, 'node_id': 74, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '221:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 10, 'lineno': 10, 'node_id': 77, 'src': '224:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 17, 'target': {'id': 'z', 'col_offset': 2, 'end_lineno': 14, 'lineno': 14, 'node_id': 90, 'src': '277:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 14, 'node_id': 89, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '277:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 14, 'lineno': 14, 'node_id': 92, 'src': '280:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 18, 'target': {'id': 'h', 'col_offset': 2, 'end_lineno': 18, 'lineno': 18, 'node_id': 105, 'src': '333:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 18, 'node_id': 104, 'value': {'col_offset': 14, 'end_lineno': 18, 'lineno': 18, 'node_id': 109, 'elements': [{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}, {'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}], 'src': '345:5:0', 'end_col_offset': 19, 'ast_type': 'List'}, 'src': '333:17:0', 'end_col_offset': 19, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 18, 'lineno': 18, 'node_id': 107, 'src': '336:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 20, 'target': {'id': 'p', 'col_offset': 2, 'end_lineno': 20, 'lineno': 20, 'node_id': 116, 'src': '404:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 20, 'node_id': 115, 'value': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}, 'src': '404:26:0', 'end_col_offset': 28, 'ast_type': 'Assign'}, {'col_offset': 2, 'end_lineno': 23, 'test': {'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}, 'orelse': [], 'lineno': 21, 'body': [{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}, {'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}], 'node_id': 138, 'src': '433:33:0', 'end_col_offset': 14, 'ast_type': 'If'}], 'node_id': 42, 'src': '173:293:0', 'end_col_offset': 14, 'ast_type': 'While'}]
in loop
{'col_offset': 1, 'end_lineno': 7, 'target': {'id': 'x', 'col_offset': 1, 'end_lineno': 7, 'lineno': 7, 'node_id': 18, 'src': '92:1:0', 'end_col_offset': 2, 'ast_type': 'Name'}, 'lineno': 7, 'node_id': 17, 'value': {'col_offset': 12, 'end_lineno': 7, 'lineno': 7, 'node_id': 22, 'elements': [{'col_offset': 13, 'end_lineno': 7, 'lineno': 7, 'node_id': 23, 'elements': [{'col_offset': 14, 'end_lineno': 7, 'lineno': 7, 'node_id': 24, 'value': 2, 'src': '105:1:0', 'end_col_offset': 15, 'ast_type': 'Int'}, {'col_offset': 16, 'end_lineno': 7, 'lineno': 7, 'node_id': 25, 'value': 4, 'src': '107:1:0', 'end_col_offset': 17, 'ast_type': 'Int'}], 'src': '104:5:0', 'end_col_offset': 18, 'ast_type': 'List'}, {'col_offset': 19, 'end_lineno': 7, 'lineno': 7, 'node_id': 27, 'elements': [{'col_offset': 20, 'end_lineno': 7, 'lineno': 7, 'node_id': 28, 'value': 3, 'src': '111:1:0', 'end_col_offset': 21, 'ast_type': 'Int'}, {'col_offset': 22, 'end_lineno': 7, 'lineno': 7, 'node_id': 29, 'value': 5, 'src': '113:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}], 'src': '110:5:0', 'end_col_offset': 24, 'ast_type': 'List'}, {'col_offset': 25, 'end_lineno': 7, 'lineno': 7, 'node_id': 31, 'elements': [{'col_offset': 26, 'end_lineno': 7, 'lineno': 7, 'node_id': 32, 'value': 8, 'src': '117:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, {'col_offset': 28, 'end_lineno': 7, 'lineno': 7, 'node_id': 33, 'value': 90, 'src': '119:2:0', 'end_col_offset': 30, 'ast_type': 'Int'}], 'src': '116:6:0', 'end_col_offset': 31, 'ast_type': 'List'}], 'src': '103:20:0', 'end_col_offset': 32, 'ast_type': 'List'}, 'src': '92:31:0', 'end_col_offset': 32, 'annotation': {'id': 'int128', 'col_offset': 3, 'end_lineno': 7, 'lineno': 7, 'node_id': 20, 'src': '94:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
getfullname
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x'}
{'beneficiary': 'int128', 'x': 'List'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int'}
end manage
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int'}
end manage
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int'}
end manage
end manage
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1'}
end loop
in loop
{'col_offset': 1, 'end_lineno': 8, 'target': {'id': 'p', 'col_offset': 1, 'end_lineno': 8, 'lineno': 8, 'node_id': 37, 'src': '158:1:0', 'end_col_offset': 2, 'ast_type': 'Name'}, 'lineno': 8, 'node_id': 36, 'value': {'col_offset': 13, 'end_lineno': 8, 'lineno': 8, 'node_id': 41, 'value': 0, 'src': '170:1:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '158:13:0', 'end_col_offset': 14, 'annotation': {'id': 'int128', 'col_offset': 4, 'end_lineno': 8, 'lineno': 8, 'node_id': 39, 'src': '161:6:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
getfullname
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p'}
end loop
in loop
{'col_offset': 1, 'end_lineno': 23, 'test': {'values': [{'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 60, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'Not'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'operand': {'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}, 'node_id': 45, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'UnaryOp'}, {'op': {'end_lineno': 9, 'col_offset': 28, 'lineno': 9, 'node_id': 60, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'Not'}, 'col_offset': 28, 'end_lineno': 9, 'lineno': 9, 'operand': {'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}, 'node_id': 59, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'UnaryOp'}], 'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 48, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'Or'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'node_id': 43, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'BoolOp'}, 'lineno': 9, 'body': [{'col_offset': 2, 'end_lineno': 13, 'target': {'id': 'y', 'col_offset': 2, 'end_lineno': 10, 'lineno': 10, 'node_id': 75, 'src': '221:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 10, 'node_id': 74, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '221:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 10, 'lineno': 10, 'node_id': 77, 'src': '224:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 17, 'target': {'id': 'z', 'col_offset': 2, 'end_lineno': 14, 'lineno': 14, 'node_id': 90, 'src': '277:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 14, 'node_id': 89, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '277:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 14, 'lineno': 14, 'node_id': 92, 'src': '280:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 18, 'target': {'id': 'h', 'col_offset': 2, 'end_lineno': 18, 'lineno': 18, 'node_id': 105, 'src': '333:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 18, 'node_id': 104, 'value': {'col_offset': 14, 'end_lineno': 18, 'lineno': 18, 'node_id': 109, 'elements': [{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}, {'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}], 'src': '345:5:0', 'end_col_offset': 19, 'ast_type': 'List'}, 'src': '333:17:0', 'end_col_offset': 19, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 18, 'lineno': 18, 'node_id': 107, 'src': '336:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 20, 'target': {'id': 'p', 'col_offset': 2, 'end_lineno': 20, 'lineno': 20, 'node_id': 116, 'src': '404:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 20, 'node_id': 115, 'value': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}, 'src': '404:26:0', 'end_col_offset': 28, 'ast_type': 'Assign'}, {'col_offset': 2, 'end_lineno': 23, 'test': {'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}, 'orelse': [], 'lineno': 21, 'body': [{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}, {'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}], 'node_id': 138, 'src': '433:33:0', 'end_col_offset': 14, 'ast_type': 'If'}], 'node_id': 42, 'src': '173:293:0', 'end_col_offset': 14, 'ast_type': 'While'}
[{'col_offset': 2, 'end_lineno': 13, 'target': {'id': 'y', 'col_offset': 2, 'end_lineno': 10, 'lineno': 10, 'node_id': 75, 'src': '221:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 10, 'node_id': 74, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '221:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 10, 'lineno': 10, 'node_id': 77, 'src': '224:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 17, 'target': {'id': 'z', 'col_offset': 2, 'end_lineno': 14, 'lineno': 14, 'node_id': 90, 'src': '277:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 14, 'node_id': 89, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '277:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 14, 'lineno': 14, 'node_id': 92, 'src': '280:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 18, 'target': {'id': 'h', 'col_offset': 2, 'end_lineno': 18, 'lineno': 18, 'node_id': 105, 'src': '333:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 18, 'node_id': 104, 'value': {'col_offset': 14, 'end_lineno': 18, 'lineno': 18, 'node_id': 109, 'elements': [{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}, {'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}], 'src': '345:5:0', 'end_col_offset': 19, 'ast_type': 'List'}, 'src': '333:17:0', 'end_col_offset': 19, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 18, 'lineno': 18, 'node_id': 107, 'src': '336:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}, {'col_offset': 2, 'end_lineno': 20, 'target': {'id': 'p', 'col_offset': 2, 'end_lineno': 20, 'lineno': 20, 'node_id': 116, 'src': '404:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 20, 'node_id': 115, 'value': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}, 'src': '404:26:0', 'end_col_offset': 28, 'ast_type': 'Assign'}, {'col_offset': 2, 'end_lineno': 23, 'test': {'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}, 'orelse': [], 'lineno': 21, 'body': [{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}, {'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}], 'node_id': 138, 'src': '433:33:0', 'end_col_offset': 14, 'ast_type': 'If'}]
in loop
{'col_offset': 2, 'end_lineno': 13, 'target': {'id': 'y', 'col_offset': 2, 'end_lineno': 10, 'lineno': 10, 'node_id': 75, 'src': '221:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 10, 'node_id': 74, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '221:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 10, 'lineno': 10, 'node_id': 77, 'src': '224:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
dict_keys(['Funder'])
ent
getfullname
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256'}
out
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value'}
end loop
in loop
{'col_offset': 2, 'end_lineno': 17, 'target': {'id': 'z', 'col_offset': 2, 'end_lineno': 14, 'lineno': 14, 'node_id': 90, 'src': '277:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 14, 'node_id': 89, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '277:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 14, 'lineno': 14, 'node_id': 92, 'src': '280:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
dict_keys(['Funder'])
ent
getfullname
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256'}
out
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value'}
end loop
in loop
{'col_offset': 2, 'end_lineno': 18, 'target': {'id': 'h', 'col_offset': 2, 'end_lineno': 18, 'lineno': 18, 'node_id': 105, 'src': '333:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 18, 'node_id': 104, 'value': {'col_offset': 14, 'end_lineno': 18, 'lineno': 18, 'node_id': 109, 'elements': [{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}, {'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}], 'src': '345:5:0', 'end_col_offset': 19, 'ast_type': 'List'}, 'src': '333:17:0', 'end_col_offset': 19, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 18, 'lineno': 18, 'node_id': 107, 'src': '336:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
getfullname
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0'}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name'}
end manage
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
end loop
in loop
{'col_offset': 2, 'end_lineno': 20, 'target': {'id': 'p', 'col_offset': 2, 'end_lineno': 20, 'lineno': 20, 'node_id': 116, 'src': '404:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 20, 'node_id': 115, 'value': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}, 'src': '404:26:0', 'end_col_offset': 28, 'ast_type': 'Assign'}
getfullname
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
end loop
in loop
{'col_offset': 2, 'end_lineno': 23, 'test': {'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}, 'orelse': [], 'lineno': 21, 'body': [{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}, {'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}], 'node_id': 138, 'src': '433:33:0', 'end_col_offset': 14, 'ast_type': 'If'}
[{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}, {'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}]
in loop
{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}
getfullname
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
end loop
in loop
{'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
end loop
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
[]
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
end loop
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
end loop
ret var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1'}
out get var
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
end get env
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
cond
{'values': [{'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 60, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'Not'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'operand': {'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}, 'node_id': 45, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'UnaryOp'}, {'op': {'end_lineno': 9, 'col_offset': 28, 'lineno': 9, 'node_id': 60, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'Not'}, 'col_offset': 28, 'end_lineno': 9, 'lineno': 9, 'operand': {'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}, 'node_id': 59, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'UnaryOp'}], 'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 48, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'Or'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'node_id': 43, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'BoolOp'}
sat condition
{'values': [{'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 60, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'Not'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'operand': {'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}, 'node_id': 45, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'UnaryOp'}, {'op': {'end_lineno': 9, 'col_offset': 28, 'lineno': 9, 'node_id': 60, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'Not'}, 'col_offset': 28, 'end_lineno': 9, 'lineno': 9, 'operand': {'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}, 'node_id': 59, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'UnaryOp'}], 'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 48, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'Or'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'node_id': 43, 'src': '179:37:0', 'end_col_offset': 44, 'ast_type': 'BoolOp'}
sat condition
{'op': {'end_lineno': 9, 'col_offset': 7, 'lineno': 9, 'node_id': 60, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'Not'}, 'col_offset': 7, 'end_lineno': 9, 'lineno': 9, 'operand': {'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}, 'node_id': 45, 'src': '179:17:0', 'end_col_offset': 24, 'ast_type': 'UnaryOp'}
sat condition
{'values': [{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}, {'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}], 'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 48, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'Or'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 47, 'src': '184:11:0', 'end_col_offset': 23, 'ast_type': 'BoolOp'}
sat condition
{'op': {'end_lineno': 9, 'col_offset': 12, 'lineno': 9, 'node_id': 52, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Lt'}, 'left': {'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}, 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}, 'node_id': 49, 'src': '184:4:0', 'end_col_offset': 16, 'ast_type': 'Compare'}
sat condition
{'id': 'p', 'col_offset': 12, 'end_lineno': 9, 'lineno': 9, 'node_id': 50, 'src': '184:1:0', 'end_col_offset': 13, 'ast_type': 'Name'}
sat condition
{'col_offset': 14, 'end_lineno': 9, 'lineno': 9, 'node_id': 53, 'value': 10, 'src': '186:2:0', 'end_col_offset': 16, 'ast_type': 'Int'}
sat condition
{'op': {'end_lineno': 9, 'col_offset': 20, 'lineno': 9, 'node_id': 142, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}, 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}, 'node_id': 54, 'src': '192:3:0', 'end_col_offset': 23, 'ast_type': 'Compare'}
sat condition
{'id': 'p', 'col_offset': 20, 'end_lineno': 9, 'lineno': 9, 'node_id': 55, 'src': '192:1:0', 'end_col_offset': 21, 'ast_type': 'Name'}
sat condition
{'col_offset': 22, 'end_lineno': 9, 'lineno': 9, 'node_id': 58, 'value': 1, 'src': '194:1:0', 'end_col_offset': 23, 'ast_type': 'Int'}
sat condition
{'op': {'end_lineno': 9, 'col_offset': 28, 'lineno': 9, 'node_id': 60, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'Not'}, 'col_offset': 28, 'end_lineno': 9, 'lineno': 9, 'operand': {'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}, 'node_id': 59, 'src': '200:16:0', 'end_col_offset': 44, 'ast_type': 'UnaryOp'}
sat condition
{'op': {'end_lineno': 9, 'col_offset': 32, 'lineno': 9, 'node_id': 72, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Eq'}, 'left': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}, 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'right': {'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}, 'node_id': 61, 'src': '204:12:0', 'end_col_offset': 44, 'ast_type': 'Compare'}
sat condition
{'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
sat condition
{'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}
sat condition
{'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 62, 'slice': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 69, 'value': {'col_offset': 37, 'end_lineno': 9, 'lineno': 9, 'node_id': 70, 'value': 0, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Int'}, 'src': '209:1:0', 'end_col_offset': 38, 'ast_type': 'Index'}, 'value': {'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 63, 'slice': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 66, 'value': {'col_offset': 34, 'end_lineno': 9, 'lineno': 9, 'node_id': 67, 'value': 0, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Int'}, 'src': '206:1:0', 'end_col_offset': 35, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 32, 'end_lineno': 9, 'lineno': 9, 'node_id': 64, 'src': '204:1:0', 'end_col_offset': 33, 'ast_type': 'Name'}, 'src': '204:4:0', 'end_col_offset': 36, 'ast_type': 'Subscript'}, 'src': '204:7:0', 'end_col_offset': 39, 'ast_type': 'Subscript'}
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
sat condition
{'col_offset': 43, 'end_lineno': 9, 'lineno': 9, 'node_id': 73, 'value': 2, 'src': '215:1:0', 'end_col_offset': 44, 'ast_type': 'Int'}
fiii
v0 | v1 | v2 | v3
rules
['p >= 10', 'p <= 1', 'x_e0_e0 > 2', 'x_e0_e0 < 2']
get_expr
{'col_offset': 2, 'end_lineno': 13, 'target': {'id': 'y', 'col_offset': 2, 'end_lineno': 10, 'lineno': 10, 'node_id': 75, 'src': '221:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 10, 'node_id': 74, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '221:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 10, 'lineno': 10, 'node_id': 77, 'src': '224:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
getfullname
{'keyword': None, 'col_offset': 14, 'end_lineno': 13, 'lineno': 10, 'node_id': 79, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 10, 'lineno': 10, 'node_id': 80, 'src': '233:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '233:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 11, 'lineno': 11, 'node_id': 87, 'value': 5, 'src': '253:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 12, 'lineno': 12, 'node_id': 88, 'value': 128, 'src': '266:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 13, 'lineno': 10, 'node_id': 82, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 11, 'lineno': 11, 'node_id': 83, 'src': '245:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 12, 'lineno': 12, 'node_id': 85, 'src': '259:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '240:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}
get_expr
{'col_offset': 2, 'end_lineno': 17, 'target': {'id': 'z', 'col_offset': 2, 'end_lineno': 14, 'lineno': 14, 'node_id': 90, 'src': '277:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 14, 'node_id': 89, 'value': {'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}, 'src': '277:53:0', 'end_col_offset': 4, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 14, 'lineno': 14, 'node_id': 92, 'src': '280:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
getfullname
{'keyword': None, 'col_offset': 14, 'end_lineno': 17, 'lineno': 14, 'node_id': 94, 'func': {'id': 'Funder', 'col_offset': 14, 'end_lineno': 14, 'lineno': 14, 'node_id': 95, 'src': '289:6:0', 'end_col_offset': 20, 'ast_type': 'Name'}, 'src': '289:41:0', 'end_col_offset': 4, 'args': [{'values': [{'col_offset': 11, 'end_lineno': 15, 'lineno': 15, 'node_id': 102, 'value': 4, 'src': '309:1:0', 'end_col_offset': 12, 'ast_type': 'Int'}, {'col_offset': 10, 'end_lineno': 16, 'lineno': 16, 'node_id': 103, 'value': 100, 'src': '322:3:0', 'end_col_offset': 13, 'ast_type': 'Int'}], 'col_offset': 21, 'end_lineno': 17, 'lineno': 14, 'node_id': 97, 'keys': [{'id': 'sender', 'col_offset': 3, 'end_lineno': 15, 'lineno': 15, 'node_id': 98, 'src': '301:6:0', 'end_col_offset': 9, 'ast_type': 'Name'}, {'id': 'value', 'col_offset': 3, 'end_lineno': 16, 'lineno': 16, 'node_id': 100, 'src': '315:5:0', 'end_col_offset': 8, 'ast_type': 'Name'}], 'src': '296:33:0', 'end_col_offset': 3, 'ast_type': 'Dict'}], 'keywords': [], 'ast_type': 'Call'}
get_expr
{'col_offset': 2, 'end_lineno': 18, 'target': {'id': 'h', 'col_offset': 2, 'end_lineno': 18, 'lineno': 18, 'node_id': 105, 'src': '333:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 18, 'node_id': 104, 'value': {'col_offset': 14, 'end_lineno': 18, 'lineno': 18, 'node_id': 109, 'elements': [{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}, {'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}], 'src': '345:5:0', 'end_col_offset': 19, 'ast_type': 'List'}, 'src': '333:17:0', 'end_col_offset': 19, 'annotation': {'id': 'Funder', 'col_offset': 5, 'end_lineno': 18, 'lineno': 18, 'node_id': 107, 'src': '336:6:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'simple': 1, 'ast_type': 'AnnAssign'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
getfullname
get_expr
{'id': 'z', 'col_offset': 15, 'end_lineno': 18, 'lineno': 18, 'node_id': 110, 'src': '346:1:0', 'end_col_offset': 16, 'ast_type': 'Name'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'id': 'y', 'col_offset': 17, 'end_lineno': 18, 'lineno': 18, 'node_id': 112, 'src': '348:1:0', 'end_col_offset': 18, 'ast_type': 'Name'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'col_offset': 2, 'end_lineno': 20, 'target': {'id': 'p', 'col_offset': 2, 'end_lineno': 20, 'lineno': 20, 'node_id': 116, 'src': '404:1:0', 'end_col_offset': 3, 'ast_type': 'Name'}, 'lineno': 20, 'node_id': 115, 'value': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}, 'src': '404:26:0', 'end_col_offset': 28, 'ast_type': 'Assign'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
in else
get_expr
{'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'Add'}, 'left': {'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}, 'node_id': 118, 'src': '408:22:0', 'end_col_offset': 28, 'ast_type': 'BinOp'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'op': {'end_lineno': 20, 'col_offset': 6, 'lineno': 20, 'node_id': 157, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'Add'}, 'left': {'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}, 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'right': {'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}, 'node_id': 119, 'src': '408:12:0', 'end_col_offset': 18, 'ast_type': 'BinOp'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'id': 'p', 'col_offset': 6, 'end_lineno': 20, 'lineno': 20, 'node_id': 120, 'src': '408:1:0', 'end_col_offset': 7, 'ast_type': 'Name'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 123, 'value': {'id': 'y', 'col_offset': 10, 'end_lineno': 20, 'lineno': 20, 'node_id': 124, 'src': '412:1:0', 'end_col_offset': 11, 'ast_type': 'Name'}, 'src': '412:8:0', 'end_col_offset': 18, 'attr': 'sender', 'ast_type': 'Attribute'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
getfullname
getfullname
get_expr
{'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 128, 'slice': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 135, 'value': {'col_offset': 26, 'end_lineno': 20, 'lineno': 20, 'node_id': 136, 'value': 0, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Int'}, 'src': '428:1:0', 'end_col_offset': 27, 'ast_type': 'Index'}, 'value': {'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 129, 'slice': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 132, 'value': {'col_offset': 23, 'end_lineno': 20, 'lineno': 20, 'node_id': 133, 'value': 0, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Int'}, 'src': '425:1:0', 'end_col_offset': 24, 'ast_type': 'Index'}, 'value': {'id': 'x', 'col_offset': 21, 'end_lineno': 20, 'lineno': 20, 'node_id': 130, 'src': '423:1:0', 'end_col_offset': 22, 'ast_type': 'Name'}, 'src': '423:4:0', 'end_col_offset': 25, 'ast_type': 'Subscript'}, 'src': '423:7:0', 'end_col_offset': 28, 'ast_type': 'Subscript'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 5, 'y.value': 128, 'z': 'z', 'z.sender': 4, 'z.value': 100, 'h': 'h', 'h_e0': 'z', 'h_e1': 'y', 'v0': 0, 'v1': 1, 'v2': 2}
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
getfullname
cond
{'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}
sat condition
{'op': {'end_lineno': 21, 'col_offset': 5, 'lineno': 21, 'node_id': 142, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Gt'}, 'left': {'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}, 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'right': {'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'node_id': 139, 'src': '436:3:0', 'end_col_offset': 8, 'ast_type': 'Compare'}
sat condition
{'id': 'p', 'col_offset': 5, 'end_lineno': 21, 'lineno': 21, 'node_id': 140, 'src': '436:1:0', 'end_col_offset': 6, 'ast_type': 'Name'}
sat condition
{'col_offset': 7, 'end_lineno': 21, 'lineno': 21, 'node_id': 143, 'value': 0, 'src': '438:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}
fiii
v0
rules
['p > 0']
get_expr
{'col_offset': 3, 'end_lineno': 22, 'target': {'id': 'p', 'col_offset': 3, 'end_lineno': 22, 'lineno': 22, 'node_id': 145, 'src': '444:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'lineno': 22, 'node_id': 144, 'value': {'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}, 'src': '444:7:0', 'end_col_offset': 10, 'ast_type': 'Assign'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
in else
get_expr
{'op': {'end_lineno': 22, 'col_offset': 7, 'lineno': 22, 'node_id': 149, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'Sub'}, 'left': {'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}, 'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'right': {'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}, 'node_id': 147, 'src': '448:3:0', 'end_col_offset': 10, 'ast_type': 'BinOp'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'col_offset': 7, 'end_lineno': 22, 'lineno': 22, 'node_id': 148, 'value': 1, 'src': '448:1:0', 'end_col_offset': 8, 'ast_type': 'Int'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
1
get_expr
{'id': 'p', 'col_offset': 9, 'end_lineno': 22, 'lineno': 22, 'node_id': 150, 'src': '450:1:0', 'end_col_offset': 10, 'ast_type': 'Name'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
getfullname
get_expr
{'op': {'end_lineno': 23, 'col_offset': 3, 'lineno': 23, 'node_id': 157, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'Add'}, 'col_offset': 3, 'target': {'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}, 'end_lineno': 23, 'lineno': 23, 'node_id': 152, 'value': {'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}, 'src': '455:11:0', 'end_col_offset': 14, 'ast_type': 'AugAssign'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': '1-p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
get_expr
{'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 153, 'value': {'id': 'y', 'col_offset': 3, 'end_lineno': 23, 'lineno': 23, 'node_id': 154, 'src': '455:1:0', 'end_col_offset': 4, 'ast_type': 'Name'}, 'src': '455:7:0', 'end_col_offset': 10, 'attr': 'value', 'ast_type': 'Attribute'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': '1-p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
getfullname
getfullname
get_expr
{'col_offset': 12, 'end_lineno': 23, 'lineno': 23, 'node_id': 158, 'value': 10, 'src': '464:2:0', 'end_col_offset': 14, 'ast_type': 'Int'}
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': '1-p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'beneficiary': 'int128', 'x': 'List', 'x_e0_e0': 'Int', 'x_e0_e1': 'Int', 'x_e1_e0': 'Int', 'x_e1_e1': 'Int', 'x_e2_e0': 'Int', 'x_e2_e1': 'Int', 'p': 'int128', 'y': 'Struct', 'y.sender': 'int128', 'y.value': 'uint256', 'z': 'Struct', 'z.sender': 'int128', 'z.value': 'uint256', 'h': 'List', 'h_e0': 'Name', 'h_e1': 'Name', 'v0': 'Int', 'v1': 'Int', 'v2': 'Int'}
10
getfullname
getfullname
p >= 10 || p <= 1 || x_e0_e0 > 2 || x_e0_e0 < 2
lstrule
['p', ' ', '>', '=', ' ', '1', '0', ' ', '|', '|', ' ', 'p', ' ', '<', '=', ' ', '1', ' ', '|', '|', ' ', 'x', '_', 'e', '0', '_', 'e', '0', ' ', '>', ' ', '2', ' ', '|', '|', ' ', 'x', '_', 'e', '0', '_', 'e', '0', ' ', '<', ' ', '2']
p < 10 & p > 1 & x_e0_e0 <= 2 & x_e0_e0 >= 2
p < 10 
 p > 1 
 x_e0_e0 <= 2 
 x_e0_e0 >= 
strtosympy
v0&v1&v2&v32
v0 & v1 & v2 & v32
rule
v0 & v1 & v2 & v32
new rule
p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2
check
{'beneficiary': 'beneficiary', 'block.coinbase': 'block.coinbase', 'block.difficulty': 'block.difficulty', 'block.number': 'block.number', 'block.prevhash': 'block.prevhash', 'block.timestamp': 'block.timestamp', 'chain.id': 'chain.id', 'msg.gas': 'msg.gas', 'msg.sender': 'msg.sender', 'msg.value': 'msg.value', 'tx.origin': 'tx.origin', 'self.balance': 'self.balance', 'ZERO_ADDRESS': 'ZERO_ADDRESS', 'EMPTY_BYTES32': 'EMPTY_BYTES32', 'MAX_INT128': 'MAX_INT128', 'MIN_INT128': 'MIN_INT128', 'MAX_DECIMAL': 'MAX_DECIMAL', 'MIN_DECIMAL': 'MIN_DECIMAL', 'MAX_UINT256': 'MAX_UINT256', 'x': 'x', 'x_e0_e0': 'x_e0_e0', 'x_e0_e1': 'x_e0_e1', 'x_e1_e0': 'x_e1_e0', 'x_e1_e1': 'x_e1_e1', 'x_e2_e0': 'x_e2_e0', 'x_e2_e1': 'x_e2_e1', 'p': 'p', 'y': 'y', 'y.sender': 'y.sender', 'y.value': 'y.value', 'z': 'z', 'z.sender': 'z.sender', 'z.value': 'z.value', 'h': 'h', 'h_e0': 'h_e0', 'h_e1': 'h_e1', 'v0': 0, 'v1': 1, 'v2': 2}
{'l0': [['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 < 2']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]], 'l1': [['l2', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p+5+x_e0_e0', 'y', 5, 128, 'z', 4, 100, 'h', 'z', 'y', 0, 1, 2], ['p > 0']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]], 'l2': [['l3', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['TRUE']]], 'l3': [['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 < 2']]]}
after2
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 < 2']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p
y
y.sender
y.value
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
p >= 10
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 < 2']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p
y
y.sender
y.value
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
p <= 1
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 < 2']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p
y
y.sender
y.value
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
x_e0_e0 > 2
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 < 2']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p
y
y.sender
y.value
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
x_e0_e0 < 2
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['x_e0_e0 < 2']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p
y
y.sender
y.value
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2
after
after2
[['l2', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p+5+x_e0_e0', 'y', 5, 128, 'z', 4, 100, 'h', 'z', 'y', 0, 1, 2], ['p > 0']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p+5+x_e0_e0
y
5
128
z
4
100
h
z
y
0
1
2
in for
while
parenthesis
p > 0
after
[['l2', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p+5+x_e0_e0', 'y', 5, 128, 'z', 4, 100, 'h', 'z', 'y', 0, 1, 2], ['p > 0']], ['l4', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', 'p', 'y', 'y.sender', 'y.value', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
p
y
y.sender
y.value
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2
after
after2
[['l3', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', 0, 1, 2], ['TRUE']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
1-p
y
y.sender
y.value+10
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
TRUE
after
after2
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 < 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
1-p
y
y.sender
y.value+10
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
p >= 10
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 < 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
1-p
y
y.sender
y.value+10
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
p <= 1
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 < 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
1-p
y
y.sender
y.value+10
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
x_e0_e0 > 2
after
[['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p >= 10']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['p <= 1']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 > 2']], ['l1', ['beneficiary', 'block.coinbase', 'block.difficulty', 'block.number', 'block.prevhash', 'block.timestamp', 'chain.id', 'msg.gas', 'msg.sender', 'msg.value', 'tx.origin', 'self.balance', 'ZERO_ADDRESS', 'EMPTY_BYTES32', 'MAX_INT128', 'MIN_INT128', 'MAX_DECIMAL', 'MIN_DECIMAL', 'MAX_UINT256', 'x', 'x_e0_e0', 'x_e0_e1', 'x_e1_e0', 'x_e1_e1', 'x_e2_e0', 'x_e2_e1', '1-p', 'y', 'y.sender', 'y.value+10', 'z', 'z.sender', 'z.value', 'h', 'h_e0', 'h_e1', '0', '1', '2'], ['x_e0_e0 < 2']]]
check1
check2
beneficiary
block.coinbase
block.difficulty
block.number
block.prevhash
block.timestamp
chain.id
msg.gas
msg.sender
msg.value
tx.origin
self.balance
ZERO_ADDRESS
EMPTY_BYTES32
MAX_INT128
MIN_INT128
MAX_DECIMAL
MIN_DECIMAL
MAX_UINT256
x
x_e0_e0
x_e0_e1
x_e1_e0
x_e1_e1
x_e2_e0
x_e2_e1
1-p
y
y.sender
y.value+10
z
z.sender
z.value
h
h_e0
h_e1
0
1
2
in for
while
parenthesis
x_e0_e0 < 2
after
source init
(GOAL COMPLEXITY)
(STARTTERM (FUNCTIONSYMBOLS l0))
(VAR beneficiary block.coinbase block.difficulty block.number block.prevhash block.timestamp chain.id msg.gas msg.sender msg.value tx.origin self.balance ZERO_ADDRESS EMPTY_BYTES32 MAX_INT128 MIN_INT128 MAX_DECIMAL MIN_DECIMAL MAX_UINT256 x x_e0_e0 x_e0_e1 x_e1_e0 x_e1_e1 x_e2_e0 x_e2_e1 p y y.sender y.value z z.sender z.value h h_e0 h_e1 v0 v1 v2)
(RULES
l0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p >= 10
l0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p <= 1
l0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 > 2
l0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 < 2
l0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l4(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2
l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l2(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p+5+x_e0_e0,y,5,128,z,4,100,h,z,y,0,1,2)) :|: p > 0
l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l4(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2
l2(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: TRUE
l3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p >= 10
l3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p <= 1
l3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 > 2
l3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 < 2
)
[{42: '(GOAL COMPLEXITY)\n(STARTTERM (FUNCTIONSYMBOLS l0))\n(VAR beneficiary block.coinbase block.difficulty block.number block.prevhash block.timestamp chain.id msg.gas msg.sender msg.value tx.origin self.balance ZERO_ADDRESS EMPTY_BYTES32 MAX_INT128 MIN_INT128 MAX_DECIMAL MIN_DECIMAL MAX_UINT256 x x_e0_e0 x_e0_e1 x_e1_e0 x_e1_e1 x_e2_e0 x_e2_e1 p y y.sender y.value z z.sender z.value h h_e0 h_e1 v0 v1 v2)\n(RULES\nl0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p >= 10\nl0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p <= 1\nl0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 > 2\nl0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 < 2\nl0(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l4(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2\nl1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l2(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p+5+x_e0_e0,y,5,128,z,4,100,h,z,y,0,1,2)) :|: p > 0\nl1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l4(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p < 10  &&  p > 1  &&  x_e0_e0 <= 2  &&  x_e0_e0 >= 2\nl2(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: TRUE\nl3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p >= 10\nl3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: p <= 1\nl3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 > 2\nl3(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,p,y,y.sender,y.value,z,z.sender,z.value,h,h_e0,h_e1,v0,v1,v2) -> Com_1(l1(beneficiary,block.coinbase,block.difficulty,block.number,block.prevhash,block.timestamp,chain.id,msg.gas,msg.sender,msg.value,tx.origin,self.balance,ZERO_ADDRESS,EMPTY_BYTES32,MAX_INT128,MIN_INT128,MAX_DECIMAL,MIN_DECIMAL,MAX_UINT256,x,x_e0_e0,x_e0_e1,x_e1_e0,x_e1_e1,x_e2_e0,x_e2_e1,1-p,y,y.sender,y.value+10,z,z.sender,z.value,h,h_e0,h_e1,0,1,2)) :|: x_e0_e0 < 2\n)'}]
b'MAYBE\n\nInitial complexity problem:\n1:\tT:\n\t\t(Comp: ?, Cost: 1)    l0(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_20 < 2 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l4(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l2(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26 + Ar_20 + 5, Ar_27, 5, 128, Ar_30, 4, 100, Ar_33, Ar_30, Ar_27, 0, 1, 2)) [ Ar_26 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l4(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l3(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, -Ar_26 + 1, Ar_27, Ar_28, Ar_29 + 10, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2))\n\t\t(Comp: ?, Cost: 1)    l3(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, -Ar_26 + 1, Ar_27, Ar_28, Ar_29 + 10, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, -Ar_26 + 1, Ar_27, Ar_28, Ar_29 + 10, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, -Ar_26 + 1, Ar_27, Ar_28, Ar_29 + 10, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l1(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, -Ar_26 + 1, Ar_27, Ar_28, Ar_29 + 10, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, 0, 1, 2)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38) -> Com_1(l0(Ar_0, Ar_1, Ar_2, Ar_3, Ar_4, Ar_5, Ar_6, Ar_7, Ar_8, Ar_9, Ar_10, Ar_11, Ar_12, Ar_13, Ar_14, Ar_15, Ar_16, Ar_17, Ar_18, Ar_19, Ar_20, Ar_21, Ar_22, Ar_23, Ar_24, Ar_25, Ar_26, Ar_27, Ar_28, Ar_29, Ar_30, Ar_31, Ar_32, Ar_33, Ar_34, Ar_35, Ar_36, Ar_37, Ar_38)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nSlicing away variables that do not contribute to conditions from problem 1 leaves variables [Ar_20, Ar_26].\nWe thus obtain the following problem:\n2:\tT:\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 < 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nRepeatedly propagating knowledge in problem 2 produces the following problem:\n3:\tT:\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 < 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nA polynomial rank function with\n\tPol(koat_start) = 1\n\tPol(l0) = 1\n\tPol(l3) = 1\n\tPol(l1) = 1\n\tPol(l2) = 1\n\tPol(l4) = 0\norients all transitions weakly and the transition\n\tl1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\nstrictly and produces the following problem:\n4:\tT:\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 < 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 < 2 ] with all transitions in problem 4, the following new transition is obtained:\n\tl3(Ar_20, Ar_26) -> Com_1(l2(Ar_20, -Ar_26 + Ar_20 + 6)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\nWe thus obtain the following problem:\n5:\tT:\n\t\t(Comp: ?, Cost: 2)    l3(Ar_20, Ar_26) -> Com_1(l2(Ar_20, -Ar_26 + Ar_20 + 6)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l3(Ar_20, Ar_26) -> Com_1(l2(Ar_20, -Ar_26 + Ar_20 + 6)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ] with all transitions in problem 5, the following new transition is obtained:\n\tl3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\nWe thus obtain the following problem:\n6:\tT:\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 > 2 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_20 > 2 ] with all transitions in problem 6, the following new transition is obtained:\n\tl3(Ar_20, Ar_26) -> Com_1(l2(Ar_20, -Ar_26 + Ar_20 + 6)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\nWe thus obtain the following problem:\n7:\tT:\n\t\t(Comp: ?, Cost: 2)    l3(Ar_20, Ar_26) -> Com_1(l2(Ar_20, -Ar_26 + Ar_20 + 6)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l3(Ar_20, Ar_26) -> Com_1(l2(Ar_20, -Ar_26 + Ar_20 + 6)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ] with all transitions in problem 7, the following new transition is obtained:\n\tl3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\nWe thus obtain the following problem:\n8:\tT:\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l1(Ar_20, Ar_26) -> Com_1(l2(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_26 > 0 ] with all transitions in problem 8, the following new transition is obtained:\n\tl1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\nWe thus obtain the following problem:\n9:\tT:\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nTesting for reachability in the complexity graph removes the following transition from problem 9:\n\tl2(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 + 1))\nWe thus obtain the following problem:\n10:\tT:\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 >= 10 ] with all transitions in problem 10, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\nWe thus obtain the following problem:\n11:\tT:\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_26 <= 1 ] with all transitions in problem 11, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\nWe thus obtain the following problem:\n12:\tT:\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 > 2 ] with all transitions in problem 12, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 > 2 /\\ Ar_26 > 0 ]\nWe thus obtain the following problem:\n13:\tT:\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 > 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26)) [ Ar_20 < 2 ] with all transitions in problem 13, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\nWe thus obtain the following problem:\n14:\tT:\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 > 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 > 2 /\\ Ar_26 > 0 ] with all transitions in problem 14, the following new transitions are obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\tl0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 ]\nWe thus obtain the following problem:\n15:\tT:\n\t\t(Comp: 1, Cost: 6)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 4)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + Ar_20 + 5)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 ] with all transitions in problem 15, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 ]\nWe thus obtain the following problem:\n16:\tT:\n\t\t(Comp: 1, Cost: 6)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 6)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 ] with all transitions in problem 16, the following new transitions are obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\n\tl0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + 2*Ar_20 + 10)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 ]\nWe thus obtain the following problem:\n17:\tT:\n\t\t(Comp: 1, Cost: 9)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\n\t\t(Comp: 1, Cost: 7)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + 2*Ar_20 + 10)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 ]\n\t\t(Comp: 1, Cost: 6)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + 2*Ar_20 + 10)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 ] with all transitions in problem 17, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\nWe thus obtain the following problem:\n18:\tT:\n\t\t(Comp: 1, Cost: 9)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\n\t\t(Comp: 1, Cost: 9)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\n\t\t(Comp: 1, Cost: 6)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)    l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)    l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)    l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)    l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)    koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ] with all transitions in problem 18, the following new transitions are obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 4*Ar_20 - 19)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ Ar_26 + 3*Ar_20 + 15 > 0 ]\n\tl0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + 3*Ar_20 + 15)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ -Ar_26 - 3*Ar_20 - 14 <= 1 ]\nWe thus obtain the following problem:\n19:\tT:\n\t\t(Comp: 1, Cost: 12)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 4*Ar_20 - 19)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ Ar_26 + 3*Ar_20 + 15 > 0 ]\n\t\t(Comp: 1, Cost: 10)    l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + 3*Ar_20 + 15)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ -Ar_26 - 3*Ar_20 - 14 <= 1 ]\n\t\t(Comp: 1, Cost: 9)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\n\t\t(Comp: 1, Cost: 6)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 3)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)     l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)     l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)     l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)     l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)     l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)     l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)     l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)     koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nBy chaining the transition l0(Ar_20, Ar_26) -> Com_1(l1(Ar_20, Ar_26 + 3*Ar_20 + 15)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ -Ar_26 - 3*Ar_20 - 14 <= 1 ] with all transitions in problem 19, the following new transition is obtained:\n\tl0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 4*Ar_20 - 19)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ -Ar_26 - 3*Ar_20 - 14 <= 1 /\\ Ar_26 + 3*Ar_20 + 15 > 0 ]\nWe thus obtain the following problem:\n20:\tT:\n\t\t(Comp: 1, Cost: 12)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 4*Ar_20 - 19)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ -Ar_26 - 3*Ar_20 - 14 <= 1 /\\ Ar_26 + 3*Ar_20 + 15 > 0 ]\n\t\t(Comp: 1, Cost: 12)    l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 4*Ar_20 - 19)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ -Ar_26 - 2*Ar_20 - 9 <= 1 /\\ Ar_26 + 2*Ar_20 + 10 > 0 /\\ Ar_26 + 3*Ar_20 + 15 > 0 ]\n\t\t(Comp: 1, Cost: 9)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 3*Ar_20 - 14)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ -Ar_26 - Ar_20 - 4 <= 1 /\\ Ar_26 + Ar_20 + 5 > 0 /\\ Ar_26 + 2*Ar_20 + 10 > 0 ]\n\t\t(Comp: 1, Cost: 6)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - 2*Ar_20 - 9)) [ Ar_20 > 2 /\\ Ar_26 > 0 /\\ Ar_26 + Ar_20 + 5 > 0 ]\n\t\t(Comp: 1, Cost: 3)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_20 < 2 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 <= 1 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 3)     l0(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 >= 10 /\\ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)     l1(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: ?, Cost: 3)     l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 > 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 3)     l3(Ar_20, Ar_26) -> Com_1(l3(Ar_20, Ar_26 - Ar_20 - 5)) [ Ar_20 < 2 /\\ -Ar_26 + 1 > 0 ]\n\t\t(Comp: ?, Cost: 1)     l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 >= 10 ]\n\t\t(Comp: ?, Cost: 1)     l3(Ar_20, Ar_26) -> Com_1(l1(Ar_20, -Ar_26 + 1)) [ Ar_26 <= 1 ]\n\t\t(Comp: ?, Cost: 2)     l1(Ar_20, Ar_26) -> Com_1(l3(Ar_20, -Ar_26 - Ar_20 - 4)) [ Ar_26 > 0 ]\n\t\t(Comp: 1, Cost: 1)     l0(Ar_20, Ar_26) -> Com_1(l4(Ar_20, Ar_26)) [ Ar_26 < 10 /\\ Ar_26 > 1 /\\ Ar_20 <= 2 /\\ Ar_20 >= 2 ]\n\t\t(Comp: 1, Cost: 0)     koat_start(Ar_20, Ar_26) -> Com_1(l0(Ar_20, Ar_26)) [ 0 <= 0 ]\n\tstart location:\tkoat_start\n\tleaf cost:\t0\n\nComplexity upper bound ?\n\nTime: 1.148 sec (SMT: 0.998 sec)\n'
None
None
